{"version":3,"sources":["..\\..\\..\\..\\..\\..\\..\\assets\\Script\\Core\\Manager_Deprecated\\View/assets\\Script\\Core\\Manager_Deprecated\\View\\ViewBase.js"],"names":["cc","Class","extends","Component","properties","onMessageEvent","msgId","data","onLoad","start","update","lateUpdate","onEnable","onDisable","onDestroy"],"mappings":";;;;;;AAAA;;;;;AAKAA,GAAGC,KAAH,CAAS;AACLC,aAASF,GAAGG,SADP;;AAGLC,gBAAY,EAHP;;AAOL;;;;;AAKAC,kBAZK,0BAYWC,KAZX,EAYkBC,IAZlB,EAYyB,CAE7B,CAdI;;;AAgBL;;;;;AAKAC,UArBK,oBAqBI,CAER,CAvBI;;;AAyBL;;;;AAIAC,SA7BK,mBA6BG,CAEP,CA/BI;;;AAiCL;;;AAGAC,UApCK,oBAoCI,CAER,CAtCI;;;AAwCL;;;;AAIAC,cA5CK,wBA4CQ,CAEZ,CA9CI;;;AAgDL;;;;AAIAC,YApDK,sBAoDM,CAEV,CAtDI;;;AAwDL;;;AAGAC,aA3DK,uBA2DO,CAEX,CA7DI;;;AA+DL;;;AAGAC,aAlEK,uBAkEO,CAEX;AApEI,CAAT","file":"ViewBase.js","sourceRoot":"..\\..\\..\\..\\..\\..\\..\\assets\\Script\\Core\\Manager_Deprecated\\View","sourcesContent":["/**\r\n * 视图父类\r\n * @type {Function}\r\n */\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n\r\n    },\r\n\r\n    /**\r\n     * 接收 消息 监听函数\r\n     * @param msgId\r\n     * @param data\r\n     */\r\n    onMessageEvent( msgId, data ) {\r\n\r\n    },\r\n\r\n    /**\r\n     * 组件脚本的初始化阶段，我们提供了 onLoad 回调函数。onLoad 回调会在组件首次激活时触发，比如所在的场景被载入，或者所\r\n     * 在节点被激活的情况下。在 onLoad 阶段，保证了你可以获取到场景中的其他节点，以及节点关联的资源数据。onLoad 总是会在\r\n     * 任何 start 方法调用前执行，这能用于安排脚本的初始化顺序。通常我们会在 onLoad 阶段去做一些初始化相关的操作。\r\n     */\r\n    onLoad() {\r\n\r\n    },\r\n\r\n    /**\r\n     * start 回调函数会在组件第一次激活前，也就是第一次执行 update 之前触发。start 通常用于初始化一些中间状态的数据，这\r\n     * 些数据可能在 update 时会发生改变，并且被频繁的 enable 和 disable。\r\n     */\r\n    start() {\r\n\r\n    },\r\n\r\n    /**\r\n     * 游戏开发的一个关键点是在每一帧渲染前更新物体的行为，状态和方位。这些更新操作通常都放在 update 回调中。\r\n     */\r\n    update() {\r\n\r\n    },\r\n\r\n    /**\r\n     * update 会在所有动画更新前执行，但如果我们要在动画更新之后才进行一些额外操作，或者希望在所有组件的 update 都执行完\r\n     * 之后才进行其它操作，那就需要用到 lateUpdate 回调。\r\n     */\r\n    lateUpdate() {\r\n\r\n    },\r\n\r\n    /**\r\n     * 当组件的 enabled 属性从 false 变为 true 时，或者所在节点的 active 属性从 false 变为 true 时，会激活 onEnable 回调。\r\n     * 倘若节点第一次被创建且 enabled 为 true，则会在 onLoad 之后，start 之前被调用。\r\n     */\r\n    onEnable() {\r\n\r\n    },\r\n\r\n    /**\r\n     * 当组件的 enabled 属性从 true 变为 false 时，或者所在节点的 active 属性从 true 变为 false 时，会激活 onDisable 回调。\r\n     */\r\n    onDisable() {\r\n\r\n    },\r\n\r\n    /**\r\n     * 当组件或者所在节点调用了 destroy()，则会调用 onDestroy 回调，并在当帧结束时统一回收组件。\r\n     */\r\n    onDestroy() {\r\n\r\n    },\r\n\r\n});\r\n"]}