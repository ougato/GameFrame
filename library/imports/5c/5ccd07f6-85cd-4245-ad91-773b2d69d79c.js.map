{"version":3,"sources":["..\\..\\..\\..\\..\\..\\..\\assets\\Script\\Core\\Manager\\Event/assets\\Script\\Core\\Manager\\Event\\EventManager.js"],"names":["EventNode","require","instance","EventManager","cc","Class","statics","getInstance","ctor","m_dictMsgList","getLastEventNode","msgId","eventNode","Utils","isNull","getNext","event","getFirstEventNode","getPrev","_register1","hasOwnProperty","lastNode","m_objPrevEventNode","m_objNextEventNode","_register2","script","msgIdList","i","length","register","param1","arguments","param2","isNumber","isObject","isArray","_unRegister1","_unRegister2","unRegister","module","exports"],"mappings":"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","file":"EventManager.js","sourceRoot":"..\\..\\..\\..\\..\\..\\..\\assets\\Script\\Core\\Manager\\Event","sourcesContent":["/**\n * 事件管理器\n * @type {Function}\n */\n\nlet EventNode = require( \"EventNode\" );\n\n// 实例化对象\nlet instance = null;\n\nlet EventManager = cc.Class({\n\n    /**\n     * 静态类\n     */\n    statics: {\n\n        /**\n         * 获取实例\n         * @returns {Function}\n         */\n        getInstance() {\n            if( instance === null ) {\n                instance = new EventManager();\n            }\n            return instance;\n        },\n    },\n\n    /**\n     * 构造\n     */\n    ctor() {\n        // 事件列表\n        this.m_dictMsgList = {};\n\n    },\n\n    /**\n     * 获取最后一个事件节点\n     * @param msgId\n     * @returns {*}\n     */\n    getLastEventNode( msgId ) {\n        let eventNode = this.m_dictMsgList[msgId];\n        while( !Utils.isNull( eventNode.getNext() ) ) {\n            eventNode = event.getNext();\n        }\n        return eventNode;\n    },\n\n    /**\n     * 获取第一个事件节点\n     * @param msgId\n     * @returns {*}\n     */\n    getFirstEventNode( msgId ) {\n        let eventNode = this.m_dictMsgList[msgId];\n        while( !Utils.isNull( eventNode.getPrev() ) ) {\n            eventNode = event.getPrev();\n        }\n        return eventNode;\n    },\n\n    /**\n     * 内部函数 注册事件_1\n     * @param msgId\n     * @param eventNode\n     * @private\n     */\n    _register1( msgId, eventNode ) {\n        if( this.m_dictMsgList.hasOwnProperty( msgId ) ) {\n            let lastNode = getLastEventNode( msgId );\n            if( Utils.isNull( lastNode ) ) {\n                this.m_dictMsgList[msgId] = eventNode;\n            } else {\n                eventNode.m_objPrevEventNode = lastNode;\n                lastNode.m_objNextEventNode = eventNode;\n            }\n        } else {\n            // msgId 在字典中不存在\n            this.m_dictMsgList[msgId] = eventNode;\n        }\n    },\n\n    /**\n     * 内部函数 注册事件_2\n     * @param script\n     * @param msgIdList\n     * @private\n     */\n    _register2( script, msgIdList ) {\n        for( let i = 0; i < msgIdList.length; ++i ) {\n            let eventNode = new EventNode( script );\n            this._register1( msgIdList[i], eventNode );\n        }\n    },\n\n    /**\n     * 注册 消息事件\n     * （注：通过参数类型来重载注册函数）\n     * 一、通过消息ID，注册事件\n     * 参数1 number 消息ID\n     * 参数2 object 事件节点\n     *\n     * 二、在脚本对象内，注册多个消息ID\n     * 参数1 object 脚本对象\n     * 参数2 array 消息ID数组\n     */\n    register() {\n        // 参数\n        // [ 0.可变参数 1.可变参数 ]\n        let param1 = arguments[0];\n        let param2 = arguments[1];\n\n        if( Utils.isNumber( param1 ) && Utils.isObject( param2 ) ) {\n            this._register1( param1, param2 );\n        } else if( Utils.isObject( param1 ) && Utils.isArray( param2 ) ) {\n            this._register2( param2, param2 );\n        }\n    },\n\n    /**\n     * 内部函数 删除注册事件_1\n     * @param msgId\n     * @param eventNode\n     * @private\n     */\n    _unRegister1( msgId, eventNode ) {\n        if( this.m_dictMsgList.hasOwnProperty( msgId ) ) {\n\n        }\n    },\n\n    /**\n     * 内部函数 删除注册事件_2\n     * @param script\n     * @param msgIdList\n     * @private\n     */\n    _unRegister2( script, msgIdList ) {\n        for( let i = 0; i < msgIdList.length; ++i ) {\n            let eventNode = new EventNode( script );\n            this._register1( msgIdList[i], eventNode );\n        }\n    },\n\n    /**\n     * 卸载注册 消息事件\n     * （注：通过参数类型来重载注册函数）\n     * 一、通过消息ID，注册事件\n     * 参数1 number 消息ID\n     * 参数2 object 事件节点\n     *\n     * 二、在脚本对象内，注册多个消息ID\n     * 参数1 object 脚本对象\n     * 参数2 array 消息ID数组\n     */\n    unRegister() {\n        // 参数\n        // [ 0.可变参数 1.可变参数 ]\n        let param1 = arguments[0];\n        let param2 = arguments[1];\n\n        if( Utils.isNumber( param1 ) && Utils.isObject( param2 ) ) {\n            this._unRegister1( param1, param2 );\n        } else if( Utils.isObject( param1 ) && Utils.isArray( param2 ) ) {\n            this._unRegister2( param2, param2 );\n        }\n    },\n\n});\n\nmodule.exports = EventManager;"]}