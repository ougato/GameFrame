{"version":3,"sources":["EventManager.js"],"names":["ScriptNode","require","instance","EventManager","cc","Class","statics","getInstance","ctor","m_dictMsgList","getLastEventNode","msgId","eventNode","hasOwnProperty","eventList","Utils","isArray","length","getFirstEventNode","getEventNodeIndex","script","index","i","findNode","isNull","getScript","_register1","lastNode","m_objPrevEventNode","m_objNextEventNode","push","_register2","msgIdList","EventNode","register","param1","arguments","param2","isNumber","isObject","_unRegister1","firstNode","nextNode","prevNode","spliceNode","splice","destroy","getNext","_unRegister2","unRegister","onMessageEvent","data","warn","module","exports"],"mappings":"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","file":"EventManager.js","sourceRoot":"../../../../../../../assets/Script_/Core/Manager/Event","sourcesContent":["/**\n * 事件管理器\n * @type {Function}\n */\n\nlet ScriptNode = require( \"ScriptNode\" );\n\n// 实例化对象\nlet instance = null;\n\nlet EventManager = cc.Class({\n\n    /**\n     * 静态类\n     */\n    statics: {\n\n        /**\n         * 获取实例\n         * @returns {Function}\n         */\n        getInstance() {\n            if( instance === null ) {\n                instance = new EventManager();\n            }\n            return instance;\n        },\n    },\n\n    /**\n     * 构造\n     */\n    ctor() {\n        // 事件列表\n        this.m_dictMsgList = {};\n\n    },\n\n    /**\n     * 获取最后一个事件节点\n     * @param msgId\n     * @returns {*}\n     */\n    getLastEventNode( msgId ) {\n        let eventNode = null;\n        if( this.m_dictMsgList.hasOwnProperty( msgId ) ) {\n            let eventList = this.m_dictMsgList[msgId];\n            if( Utils.isArray( eventList ) && eventList.length > 0 ) {\n                eventNode = eventList[eventList.length-1];\n            }\n        }\n        return eventNode;\n    },\n\n    /**\n     * 获取第一个事件节点\n     * @param msgId\n     * @returns {*}\n     */\n    getFirstEventNode( msgId ) {\n        let eventNode = null;\n        if( this.m_dictMsgList.hasOwnProperty( msgId ) ) {\n            let eventList = this.m_dictMsgList[msgId];\n            if( Utils.isArray( eventList ) && eventList.length > 0 ) {\n                eventNode = eventList[0];\n            }\n        }\n        return eventNode;\n    },\n\n    /**\n     * 获取事件节点 在 数组里的下标\n     * @param msgId\n     * @param script\n     * @returns {number}\n     */\n    getEventNodeIndex( msgId, script ) {\n        let index = -1;\n        if( this.m_dictMsgList.hasOwnProperty( msgId ) && Utils.isArray( this.m_dictMsgList[msgId] ) ) {\n            for( let i = 0; i < this.m_dictMsgList[msgId].length; ++i ) {\n                let findNode = this.m_dictMsgList[msgId][i];\n                if( !Utils.isNull( findNode ) && findNode.getScript() === script ) {\n                    index = i;\n                    break;\n                }\n            }\n        }\n        return index;\n    },\n\n    /**\n     * 内部函数 注册事件_1\n     * @param msgId\n     * @param eventNode\n     * @private\n     */\n    _register1( msgId, eventNode ) {\n        if( this.m_dictMsgList.hasOwnProperty( msgId ) && Utils.isArray( this.m_dictMsgList[msgId] ) ) {\n            let lastNode = getLastEventNode( msgId );\n            if( !Utils.isNull( lastNode ) ) {\n                eventNode.m_objPrevEventNode = lastNode;\n                eventNode.m_objNextEventNode = null;\n                lastNode.m_objNextEventNode = eventNode;\n            }\n        } else {\n            // msgId 在字典中不存在\n            this.m_dictMsgList[msgId] = [];\n        }\n        this.m_dictMsgList[msgId].push( eventNode );\n    },\n\n    /**\n     * 内部函数 注册事件_2\n     * @param script\n     * @param msgIdList\n     * @private\n     */\n    _register2( script, msgIdList ) {\n        for( let i = 0; i < msgIdList.length; ++i ) {\n            let eventNode = new EventNode( script );\n            this._register1( msgIdList[i], eventNode );\n        }\n    },\n\n    /**\n     * 注册 消息事件\n     * （注：通过参数类型来重载注册函数）\n     * 一、通过消息ID，注册事件\n     * 参数1 number 消息ID\n     * 参数2 object 事件节点\n     *\n     * 二、在脚本对象内，注册多个消息ID\n     * 参数1 object 脚本对象\n     * 参数2 array 消息ID数组\n     */\n    register() {\n        // 参数\n        // [ 0.可变参数 1.可变参数 ]\n        let param1 = arguments[0];\n        let param2 = arguments[1];\n\n        if( Utils.isNumber( param1 ) && Utils.isObject( param2 ) ) {\n            this._register1( param1, param2 );\n        } else if( Utils.isObject( param1 ) && Utils.isArray( param2 ) ) {\n            this._register2( param2, param2 );\n        }\n    },\n\n    /**\n     * 内部函数 删除注册事件_1\n     * @param msgId\n     * @param script\n     * @private\n     */\n    _unRegister1( msgId, script ) {\n        if( this.m_dictMsgList.hasOwnProperty( msgId ) && Utils.isArray( this.m_dictMsgList[msgId] ) ) {\n            let firstNode = this.getFirstEventNode( msgId );\n            let nextNode = firstNode;\n            while( !Utils.isNull( nextNode ) ) {\n                if( nextNode.getScript() === script ) {\n                    let index = this.getEventNodeIndex( script );\n                    if( index >= 0 ) {\n                        let prevNode = script.m_objPrevEventNode;\n                        prevNode.m_objNextEventNode = script.m_objNextEventNode;\n                        let nextNode = script.m_objNextEventNode;\n                        nextNode.m_objPrevEventNode = script.m_objPrevEventNode;\n                        let spliceNode = this.m_dictMsgList[msgId].splice( index, 1 );\n                        spliceNode.destroy();\n                    }\n                    break;\n                }\n                nextNode = nextNode.getNext();\n            }\n        }\n    },\n\n    /**\n     * 内部函数 删除注册事件_2\n     * @param script\n     * @param msgIdList\n     * @private\n     */\n    _unRegister2( script, msgIdList ) {\n        for( let i = 0; i < msgIdList.length; ++i ) {\n            this._unRegister1( msgIdList[i], script );\n        }\n    },\n\n    /**\n     * 卸载注册 消息事件\n     * （注：通过参数类型来重载注册函数）\n     * 一、通过消息ID，注册事件\n     * 参数1 number 消息ID\n     * 参数2 object 事件节点\n     *\n     * 二、在脚本对象内，注册多个消息ID\n     * 参数1 object 脚本对象\n     * 参数2 array 消息ID数组\n     */\n    unRegister() {\n        // 参数\n        // [ 0.可变参数 1.可变参数 ]\n        let param1 = arguments[0];\n        let param2 = arguments[1];\n\n        if( Utils.isNumber( param1 ) && Utils.isObject( param2 ) ) {\n            this._unRegister1( param1, param2 );\n        } else if( Utils.isObject( param1 ) && Utils.isArray( param2 ) ) {\n            this._unRegister2( param2, param2 );\n        }\n    },\n\n    /**\n     * 接收 消息 监听函数\n     * @param msgId\n     * @param data\n     */\n    onMessageEvent( msgId, data ) {\n        if( this.m_dictMsgList.hasOwnProperty( msgId ) ) {\n\n        } else {\n            cc.warn( \"未找到消息 [\" + msgId + \"]\" );\n        }\n    },\n\n});\n\nmodule.exports = EventManager;"]}