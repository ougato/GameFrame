{"version":3,"sources":["ScriptEventManager.js"],"names":["ScriptNode","require","instance","ScriptEventManager","cc","Class","statics","getInstance","ctor","m_dictMsgList","getLastScriptNode","msgId","scriptNode","hasOwnProperty","scriptList","Utils","isArray","length","getFirstScriptNode","getScriptNodeIndex","script","index","i","findNode","isNull","getScript","_register1","lastNode","m_objPrevScript","m_objNextScript","push","_register2","msgIdList","register","param1","arguments","param2","isNumber","isObject","_unRegister1","firstNode","nextNode","prevNode","spliceNode","splice","destroy","getNext","_unRegister2","unRegister","onMessageEvent","data","warn","module","exports"],"mappings":"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","file":"ScriptEventManager.js","sourceRoot":"../../../../../../../assets/Script_/Core/Manager/Event","sourcesContent":["/**\n * 脚本事件 管理器\n * @type {Function}\n */\n\nlet ScriptNode = require( \"ScriptNode\" );\n\n// 实例化对象\nlet instance = null;\n\nlet ScriptEventManager = cc.Class({\n\n    /**\n     * 静态类\n     */\n    statics: {\n\n        /**\n         * 获取实例\n         * @returns {Function}\n         */\n        getInstance() {\n            if( instance === null ) {\n                instance = new ScriptEventManager();\n            }\n            return instance;\n        },\n    },\n\n    /**\n     * 构造\n     */\n    ctor() {\n        // 事件列表\n        this.m_dictMsgList = {};\n\n    },\n\n    /**\n     * 获取最后一个脚本节点\n     * @param msgId\n     * @returns {*}\n     */\n    getLastScriptNode( msgId ) {\n        let scriptNode = null;\n        if( this.m_dictMsgList.hasOwnProperty( msgId ) ) {\n            let scriptList = this.m_dictMsgList[msgId];\n            if( Utils.isArray( scriptList ) && scriptList.length > 0 ) {\n                scriptNode = scriptList[scriptList.length-1];\n            }\n        }\n        return scriptNode;\n    },\n\n    /**\n     * 获取第一个脚本节点\n     * @param msgId\n     * @returns {*}\n     */\n    getFirstScriptNode( msgId ) {\n        let scriptNode = null;\n        if( this.m_dictMsgList.hasOwnProperty( msgId ) ) {\n            let scriptList = this.m_dictMsgList[msgId];\n            if( Utils.isArray( scriptList ) && scriptList.length > 0 ) {\n                scriptNode = scriptList[0];\n            }\n        }\n        return scriptNode;\n    },\n\n    /**\n     * 获取脚本节点 在 数组里的下标\n     * @param msgId\n     * @param script\n     * @returns {number}\n     */\n    getScriptNodeIndex( msgId, script ) {\n        let index = -1;\n        if( this.m_dictMsgList.hasOwnProperty( msgId ) && Utils.isArray( this.m_dictMsgList[msgId] ) ) {\n            for( let i = 0; i < this.m_dictMsgList[msgId].length; ++i ) {\n                let findNode = this.m_dictMsgList[msgId][i];\n                if( !Utils.isNull( findNode ) && findNode.getScript() === script ) {\n                    index = i;\n                    break;\n                }\n            }\n        }\n        return index;\n    },\n\n    /**\n     * 内部函数 注册事件_1\n     * @param msgId\n     * @param scriptNode\n     * @private\n     */\n    _register1( msgId, scriptNode ) {\n        if( this.m_dictMsgList.hasOwnProperty( msgId ) && Utils.isArray( this.m_dictMsgList[msgId] ) ) {\n            let lastNode = getLastScriptNode( msgId );\n            if( !Utils.isNull( lastNode ) ) {\n                scriptNode.m_objPrevScript = lastNode;\n                scriptNode.m_objNextScript = null;\n                lastNode.m_objNextScript = scriptNode;\n            }\n        } else {\n            // msgId 在字典中不存在\n            this.m_dictMsgList[msgId] = [];\n        }\n        this.m_dictMsgList[msgId].push( scriptNode );\n    },\n\n    /**\n     * 内部函数 注册事件_2\n     * @param script\n     * @param msgIdList\n     * @private\n     */\n    _register2( script, msgIdList ) {\n        for( let i = 0; i < msgIdList.length; ++i ) {\n            let scriptNode = new ScriptNode( script );\n            this._register1( msgIdList[i], scriptNode );\n        }\n    },\n\n    /**\n     * 注册 消息事件\n     * （注：通过参数类型来重载注册函数）\n     * 一、通过消息ID，注册事件\n     * 参数1 number 消息ID\n     * 参数2 object 事件节点\n     *\n     * 二、在脚本对象内，注册多个消息ID\n     * 参数1 object 脚本对象\n     * 参数2 array 消息ID数组\n     */\n    register() {\n        // 参数\n        // [ 0.可变参数 1.可变参数 ]\n        let param1 = arguments[0];\n        let param2 = arguments[1];\n\n        if( Utils.isNumber( param1 ) && Utils.isObject( param2 ) ) {\n            this._register1( param1, param2 );\n        } else if( Utils.isObject( param1 ) && Utils.isArray( param2 ) ) {\n            this._register2( param2, param2 );\n        }\n    },\n\n    /**\n     * 内部函数 删除注册事件_1\n     * @param msgId\n     * @param script\n     * @private\n     */\n    _unRegister1( msgId, script ) {\n        if( this.m_dictMsgList.hasOwnProperty( msgId ) && Utils.isArray( this.m_dictMsgList[msgId] ) ) {\n            let firstNode = this.getFirstScriptNode( msgId );\n            let nextNode = firstNode;\n            while( !Utils.isNull( nextNode ) ) {\n                if( nextNode.getScript() === script ) {\n                    let index = this.getScriptNodeIndex( script );\n                    if( index >= 0 ) {\n                        let prevNode = script.m_objPrevScript;\n                        prevNode.m_objNextScript = script.m_objNextScript;\n                        let nextNode = script.m_objNextScript;\n                        nextNode.m_objPrevScript = script.m_objPrevScript;\n                        let spliceNode = this.m_dictMsgList[msgId].splice( index, 1 );\n                        spliceNode.destroy();\n                    }\n                    break;\n                }\n                nextNode = nextNode.getNext();\n            }\n        }\n    },\n\n    /**\n     * 内部函数 删除注册事件_2\n     * @param script\n     * @param msgIdList\n     * @private\n     */\n    _unRegister2( script, msgIdList ) {\n        for( let i = 0; i < msgIdList.length; ++i ) {\n            this._unRegister1( msgIdList[i], script );\n        }\n    },\n\n    /**\n     * 卸载注册 消息事件\n     * （注：通过参数类型来重载注册函数）\n     * 一、通过消息ID，注册事件\n     * 参数1 number 消息ID\n     * 参数2 object 事件节点\n     *\n     * 二、在脚本对象内，注册多个消息ID\n     * 参数1 object 脚本对象\n     * 参数2 array 消息ID数组\n     */\n    unRegister() {\n        // 参数\n        // [ 0.可变参数 1.可变参数 ]\n        let param1 = arguments[0];\n        let param2 = arguments[1];\n\n        if( Utils.isNumber( param1 ) && Utils.isObject( param2 ) ) {\n            this._unRegister1( param1, param2 );\n        } else if( Utils.isObject( param1 ) && Utils.isArray( param2 ) ) {\n            this._unRegister2( param2, param2 );\n        }\n    },\n\n    /**\n     * 接收 消息 监听函数\n     * @param msgId\n     * @param data\n     */\n    onMessageEvent( msgId, data ) {\n        if( this.m_dictMsgList.hasOwnProperty( msgId ) ) {\n\n        } else {\n            cc.warn( \"未找到消息 [\" + msgId + \"]\" );\n        }\n    },\n\n});\n\nmodule.exports = ScriptEventManager;"]}