{"version":3,"sources":["EventManager.js"],"names":["instance","EventManager","cc","Class","statics","getInstance","ctor","m_dictEventList","_register1","msgId","eventNode","hasOwnProperty","_register2","script","msgIdList","register","param1","arguments","param2","Utils","isNumber","isObject","isArray","unRegister","module","exports"],"mappings":";;;;;;AAAA;;;;;AAKA;AACA,IAAIA,WAAW,IAAf;;AAEA,IAAIC,eAAeC,GAAGC,KAAH,CAAS;;AAExB;;;AAGAC,aAAS;;AAEL;;;;AAIAC,mBANK,yBAMS;AACV,gBAAIL,aAAa,IAAjB,EAAwB;AACpBA,2BAAW,IAAIC,YAAJ,EAAX;AACH;AACD,mBAAOD,QAAP;AACH;AAXI,KALe;;AAmBxB;;;AAGAM,QAtBwB,kBAsBjB;AACH;AACA,aAAKC,eAAL,GAAuB,EAAvB;AAEH,KA1BuB;;;AA4BxB;;;;;;AAMAC,cAlCwB,sBAkCZC,KAlCY,EAkCLC,SAlCK,EAkCO;AAC3B,YAAI,KAAKH,eAAL,CAAqBI,cAArB,CAAqCF,KAArC,CAAJ,EAAmD,CAElD,CAFD,MAEO,CAEN;AACJ,KAxCuB;;;AA0CxB;;;;;;AAMAG,cAhDwB,sBAgDZC,MAhDY,EAgDJC,SAhDI,EAgDQ,CAE/B,CAlDuB;;;AAoDxB;;;;;;;;;;;AAWAC,YA/DwB,sBA+Db;AACP;AACA;AACA,YAAIC,SAASC,UAAU,CAAV,CAAb;AACA,YAAIC,SAASD,UAAU,CAAV,CAAb;;AAEA,YAAIE,MAAMC,QAAN,CAAgBJ,MAAhB,KAA4BG,MAAME,QAAN,CAAgBH,MAAhB,CAAhC,EAA2D;AACvD,iBAAKV,UAAL,CAAiBQ,MAAjB,EAAyBE,MAAzB;AACH,SAFD,MAEO,IAAIC,MAAME,QAAN,CAAgBL,MAAhB,KAA4BG,MAAMG,OAAN,CAAeJ,MAAf,CAAhC,EAA0D;AAC7D,iBAAKN,UAAL,CAAiBM,MAAjB,EAAyBA,MAAzB;AACH;AACJ,KA1EuB;AA4ExBK,cA5EwB,wBA4EX,CAEZ;AA9EuB,CAAT,CAAnB;;AAkFAC,OAAOC,OAAP,GAAiBxB,YAAjB","file":"EventManager.js","sourceRoot":"..\\..\\..\\..\\..\\..\\..\\assets\\Script\\Core\\Manager\\Event","sourcesContent":["/**\n * 事件管理器\n * @type {Function}\n */\n\n// 实例化对象\nlet instance = null;\n\nlet EventManager = cc.Class({\n\n    /**\n     * 静态类\n     */\n    statics: {\n\n        /**\n         * 获取实例\n         * @returns {Function}\n         */\n        getInstance() {\n            if( instance === null ) {\n                instance = new EventManager();\n            }\n            return instance;\n        },\n    },\n\n    /**\n     * 构造\n     */\n    ctor() {\n        // 事件列表\n        this.m_dictEventList = {};\n\n    },\n\n    /**\n     * 内部函数 注册事件1\n     * @param msgId\n     * @param eventNode\n     * @private\n     */\n    _register1( msgId, eventNode ) {\n        if( this.m_dictEventList.hasOwnProperty( msgId ) ) {\n\n        } else {\n\n        }\n    },\n\n    /**\n     * 内部函数 注册事件2\n     * @param script\n     * @param msgIdList\n     * @private\n     */\n    _register2( script, msgIdList ) {\n\n    },\n\n    /**\n     * 注册 消息事件\n     * （注：通过参数类型来重载注册函数）\n     * 一、通过消息ID，注册事件\n     * 参数1 number 消息ID\n     * 参数2 object 事件节点\n     *\n     * 二、在脚本对象内，注册多个消息ID\n     * 参数1 object 脚本对象\n     * 参数2 array 消息ID数组\n     */\n    register() {\n        // 参数\n        // [ 0.+++ 1.+++ ]\n        let param1 = arguments[0];\n        let param2 = arguments[1];\n\n        if( Utils.isNumber( param1 ) && Utils.isObject( param2 ) ) {\n            this._register1( param1, param2 );\n        } else if( Utils.isObject( param1 ) && Utils.isArray( param2 ) ) {\n            this._register2( param2, param2 );\n        }\n    },\n\n    unRegister() {\n\n    },\n\n});\n\nmodule.exports = EventManager;"]}